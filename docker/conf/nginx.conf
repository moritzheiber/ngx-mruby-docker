user daemon;
worker_processes auto;

events {
    worker_connections  1024;
}

env PROXY1_PORT_80_TCP_ADDR;
env PROXY1_PORT_80_TCP_PORT;
env PROXY2_PORT_80_TCP_ADDR;
env PROXY2_PORT_80_TCP_PORT;
env PROXY3_PORT_80_TCP_ADDR;
env PROXY3_PORT_80_TCP_PORT;

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /mruby-hello {
            mruby_content_handler_code 'Nginx.echo "server ip: #{Nginx::Connection.new.local_ip}: hello ngx_mruby world."';
        }

        location /mruby-test {
            mruby_content_handler /usr/local/nginx/hook/test.rb;
        }

        location /mruby-proxy {
            mruby_set $backend /usr/local/nginx/hook/proxy.rb;
            proxy_pass http://$backend;
        }

        location /hello {
            mruby_content_handler_code '
                if server_name == "NGINX"
                  Server = Nginx
                elsif server_name == "Apache"
                  Server = Apache
                end

                r = Server::Request.new
                s = Server::Server.new
                c = Server::Connection.new
                Server.echo "hostname: " + r.hostname
                Server.echo "path: " + s.path
                Server.echo "hello world"
                Server.echo "documento_root: #{s.document_root}"
                Server.echo "path: #{s.path}"
                Server.echo "remote ip: #{c.remote_ip}"
                Server.echo "remote port: #{c.remote_port}"
                Server.echo "user_agent: #{r.headers_in.user_agent}"
                Server.echo "local ip: #{c.local_ip}"
                Server.echo "local port: #{c.local_port}"

                r.headers_in.all.keys.each do |k|
                  Server.echo "#{k}: #{r.headers_in[k]}"
                end
                if /Mac/ =~ r.headers_in.user_agent
                  Server.echo "your pc is mac"
                end
          ';
        }

        location /rputs {
            mruby_content_handler_code '
                Nginx.echo Nginx.module_name
                Nginx.echo Nginx.configure
            ';
        }

        location /headers {
            mruby_content_handler_code '
                r = Nginx::Request.new
                r.content_type = "text/html"
                r.headers_out["X-NGX-MRUBY"] = "support"
                Nginx.rputs r.headers_out["X-NGX-MRUBY"] #=> support
                r.headers_out["X-NGX-MRUBY"] = ["support", "multi"]
                Nginx.rputs r.headers_out["X-NGX-MRUBY"] #=> ["support", "
            ';
        }

        location /request {
            mruby_content_handler_code '
                r = Nginx::Request.new
                r.content_type = "text/html"
                Nginx.rputs "headers: #{r.headers_in}<br><br>"
            ';
        }

        location /body {
            mruby_enable_read_request_body on;    # here
            mruby_access_handler_code '
                req = Nginx::Request.new
                Nginx.log Nginx::LOG_ERR, "method:#{req.method}"
                rc = req.read_body
                body = req.get_body
                Nginx.log Nginx::LOG_ERR, "rc:#{rc}"
                Nginx.log Nginx::LOG_ERR, "body:#{body}"
                Userdata.new.req_body = body
            ';
            mruby_content_handler_code '
                Nginx.rputs Userdata.new.req_body
            ';
        }

        location /output {
            mruby_content_handler_code '
                req = Nginx::Request.new
                Nginx.rputs "hello"
            ';

            mruby_output_body_filter_code '
                  f = Nginx::Filter.new
                response = f.body
                f.body = (response + " world").upcase
            ';
        }

        location /inter_var_inline {
            set $fuga "100";
            mruby_set_code $hoge 'Nginx::Var.new.fuga.to_i * 2';
            mruby_content_handler_code '
              r = Nginx::Request.new
              Nginx.rputs "fuga => #{r.var.fuga} "
              Nginx.rputs "hoge => #{r.var.hoge} "
              r.var.set "hoge", r.var.hoge.to_i * 2
              Nginx.rputs "hoge => #{r.var.hoge} "
            ';
        }

        location /redirect {
            mruby_rewrite_handler_code '
              Nginx.redirect "http://ngx.mruby.org/", Nginx::HTTP_MOVED_PERMANENTLY
            ';
        }

        location /unavailable {
            mruby_rewrite_handler_code '
              return Nginx::HTTP_SERVICE_UNAVAILABLE
            ';
        }


        # test for Nginx::Var
        # http://localhost/nginx_var?name=http_host
        location /nginx_var {
            mruby_content_handler_code '
              r = Nginx::Request.new
              Nginx.echo r.var.send r.var.arg_name.to_sym
              Nginx.return Nginx::HTTP_OK
            ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
